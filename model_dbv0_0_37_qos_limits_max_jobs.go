/*
 * Slurm Rest API
 *
 * API to access and control Slurm DB.
 *
 * API version: dbv0.0.37
 * Contact: sales@schedmd.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slurmdbrest

import (
	"encoding/json"
)

// Dbv0037QosLimitsMaxJobs Limits on jobs settings
type Dbv0037QosLimitsMaxJobs struct {
	Per *Dbv0037QosLimitsMaxJobsPer `json:"per,omitempty"`
}

// NewDbv0037QosLimitsMaxJobs instantiates a new Dbv0037QosLimitsMaxJobs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDbv0037QosLimitsMaxJobs() *Dbv0037QosLimitsMaxJobs {
	this := Dbv0037QosLimitsMaxJobs{}
	return &this
}

// NewDbv0037QosLimitsMaxJobsWithDefaults instantiates a new Dbv0037QosLimitsMaxJobs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDbv0037QosLimitsMaxJobsWithDefaults() *Dbv0037QosLimitsMaxJobs {
	this := Dbv0037QosLimitsMaxJobs{}
	return &this
}

// GetPer returns the Per field value if set, zero value otherwise.
func (o *Dbv0037QosLimitsMaxJobs) GetPer() Dbv0037QosLimitsMaxJobsPer {
	if o == nil || o.Per == nil {
		var ret Dbv0037QosLimitsMaxJobsPer
		return ret
	}
	return *o.Per
}

// GetPerOk returns a tuple with the Per field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dbv0037QosLimitsMaxJobs) GetPerOk() (*Dbv0037QosLimitsMaxJobsPer, bool) {
	if o == nil || o.Per == nil {
		return nil, false
	}
	return o.Per, true
}

// HasPer returns a boolean if a field has been set.
func (o *Dbv0037QosLimitsMaxJobs) HasPer() bool {
	if o != nil && o.Per != nil {
		return true
	}

	return false
}

// SetPer gets a reference to the given Dbv0037QosLimitsMaxJobsPer and assigns it to the Per field.
func (o *Dbv0037QosLimitsMaxJobs) SetPer(v Dbv0037QosLimitsMaxJobsPer) {
	o.Per = &v
}

func (o Dbv0037QosLimitsMaxJobs) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Per != nil {
		toSerialize["per"] = o.Per
	}
	return json.Marshal(toSerialize)
}

type NullableDbv0037QosLimitsMaxJobs struct {
	value *Dbv0037QosLimitsMaxJobs
	isSet bool
}

func (v NullableDbv0037QosLimitsMaxJobs) Get() *Dbv0037QosLimitsMaxJobs {
	return v.value
}

func (v *NullableDbv0037QosLimitsMaxJobs) Set(val *Dbv0037QosLimitsMaxJobs) {
	v.value = val
	v.isSet = true
}

func (v NullableDbv0037QosLimitsMaxJobs) IsSet() bool {
	return v.isSet
}

func (v *NullableDbv0037QosLimitsMaxJobs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDbv0037QosLimitsMaxJobs(val *Dbv0037QosLimitsMaxJobs) *NullableDbv0037QosLimitsMaxJobs {
	return &NullableDbv0037QosLimitsMaxJobs{value: val, isSet: true}
}

func (v NullableDbv0037QosLimitsMaxJobs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDbv0037QosLimitsMaxJobs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


