/*
 * Slurm Rest API
 *
 * API to access and control Slurm DB.
 *
 * API version: dbv0.0.37
 * Contact: sales@schedmd.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slurmdbrest

import (
	"encoding/json"
)

// Dbv0037AssociationMaxTres Max TRES settings
type Dbv0037AssociationMaxTres struct {
	Per *Dbv0037AssociationMaxTresPer `json:"per,omitempty"`
	// TRES list of attributes
	Total *[]map[string]interface{} `json:"total,omitempty"`
	Minutes *Dbv0037AssociationMaxTresMinutes `json:"minutes,omitempty"`
}

// NewDbv0037AssociationMaxTres instantiates a new Dbv0037AssociationMaxTres object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDbv0037AssociationMaxTres() *Dbv0037AssociationMaxTres {
	this := Dbv0037AssociationMaxTres{}
	return &this
}

// NewDbv0037AssociationMaxTresWithDefaults instantiates a new Dbv0037AssociationMaxTres object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDbv0037AssociationMaxTresWithDefaults() *Dbv0037AssociationMaxTres {
	this := Dbv0037AssociationMaxTres{}
	return &this
}

// GetPer returns the Per field value if set, zero value otherwise.
func (o *Dbv0037AssociationMaxTres) GetPer() Dbv0037AssociationMaxTresPer {
	if o == nil || o.Per == nil {
		var ret Dbv0037AssociationMaxTresPer
		return ret
	}
	return *o.Per
}

// GetPerOk returns a tuple with the Per field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dbv0037AssociationMaxTres) GetPerOk() (*Dbv0037AssociationMaxTresPer, bool) {
	if o == nil || o.Per == nil {
		return nil, false
	}
	return o.Per, true
}

// HasPer returns a boolean if a field has been set.
func (o *Dbv0037AssociationMaxTres) HasPer() bool {
	if o != nil && o.Per != nil {
		return true
	}

	return false
}

// SetPer gets a reference to the given Dbv0037AssociationMaxTresPer and assigns it to the Per field.
func (o *Dbv0037AssociationMaxTres) SetPer(v Dbv0037AssociationMaxTresPer) {
	o.Per = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *Dbv0037AssociationMaxTres) GetTotal() []map[string]interface{} {
	if o == nil || o.Total == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dbv0037AssociationMaxTres) GetTotalOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Total == nil {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *Dbv0037AssociationMaxTres) HasTotal() bool {
	if o != nil && o.Total != nil {
		return true
	}

	return false
}

// SetTotal gets a reference to the given []map[string]interface{} and assigns it to the Total field.
func (o *Dbv0037AssociationMaxTres) SetTotal(v []map[string]interface{}) {
	o.Total = &v
}

// GetMinutes returns the Minutes field value if set, zero value otherwise.
func (o *Dbv0037AssociationMaxTres) GetMinutes() Dbv0037AssociationMaxTresMinutes {
	if o == nil || o.Minutes == nil {
		var ret Dbv0037AssociationMaxTresMinutes
		return ret
	}
	return *o.Minutes
}

// GetMinutesOk returns a tuple with the Minutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dbv0037AssociationMaxTres) GetMinutesOk() (*Dbv0037AssociationMaxTresMinutes, bool) {
	if o == nil || o.Minutes == nil {
		return nil, false
	}
	return o.Minutes, true
}

// HasMinutes returns a boolean if a field has been set.
func (o *Dbv0037AssociationMaxTres) HasMinutes() bool {
	if o != nil && o.Minutes != nil {
		return true
	}

	return false
}

// SetMinutes gets a reference to the given Dbv0037AssociationMaxTresMinutes and assigns it to the Minutes field.
func (o *Dbv0037AssociationMaxTres) SetMinutes(v Dbv0037AssociationMaxTresMinutes) {
	o.Minutes = &v
}

func (o Dbv0037AssociationMaxTres) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Per != nil {
		toSerialize["per"] = o.Per
	}
	if o.Total != nil {
		toSerialize["total"] = o.Total
	}
	if o.Minutes != nil {
		toSerialize["minutes"] = o.Minutes
	}
	return json.Marshal(toSerialize)
}

type NullableDbv0037AssociationMaxTres struct {
	value *Dbv0037AssociationMaxTres
	isSet bool
}

func (v NullableDbv0037AssociationMaxTres) Get() *Dbv0037AssociationMaxTres {
	return v.value
}

func (v *NullableDbv0037AssociationMaxTres) Set(val *Dbv0037AssociationMaxTres) {
	v.value = val
	v.isSet = true
}

func (v NullableDbv0037AssociationMaxTres) IsSet() bool {
	return v.isSet
}

func (v *NullableDbv0037AssociationMaxTres) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDbv0037AssociationMaxTres(val *Dbv0037AssociationMaxTres) *NullableDbv0037AssociationMaxTres {
	return &NullableDbv0037AssociationMaxTres{value: val, isSet: true}
}

func (v NullableDbv0037AssociationMaxTres) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDbv0037AssociationMaxTres) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


