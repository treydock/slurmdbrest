/*
 * Slurm Rest API
 *
 * API to access and control Slurm DB.
 *
 * API version: dbv0.0.37
 * Contact: sales@schedmd.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slurmdbrest

import (
	"encoding/json"
)

// Dbv0037QosLimitsMaxJobsPer Limits on jobs per settings
type Dbv0037QosLimitsMaxJobsPer struct {
	// Max jobs per account
	Account *int32 `json:"account,omitempty"`
	// Max jobs per user
	User *int32 `json:"user,omitempty"`
}

// NewDbv0037QosLimitsMaxJobsPer instantiates a new Dbv0037QosLimitsMaxJobsPer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDbv0037QosLimitsMaxJobsPer() *Dbv0037QosLimitsMaxJobsPer {
	this := Dbv0037QosLimitsMaxJobsPer{}
	return &this
}

// NewDbv0037QosLimitsMaxJobsPerWithDefaults instantiates a new Dbv0037QosLimitsMaxJobsPer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDbv0037QosLimitsMaxJobsPerWithDefaults() *Dbv0037QosLimitsMaxJobsPer {
	this := Dbv0037QosLimitsMaxJobsPer{}
	return &this
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *Dbv0037QosLimitsMaxJobsPer) GetAccount() int32 {
	if o == nil || o.Account == nil {
		var ret int32
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dbv0037QosLimitsMaxJobsPer) GetAccountOk() (*int32, bool) {
	if o == nil || o.Account == nil {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *Dbv0037QosLimitsMaxJobsPer) HasAccount() bool {
	if o != nil && o.Account != nil {
		return true
	}

	return false
}

// SetAccount gets a reference to the given int32 and assigns it to the Account field.
func (o *Dbv0037QosLimitsMaxJobsPer) SetAccount(v int32) {
	o.Account = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *Dbv0037QosLimitsMaxJobsPer) GetUser() int32 {
	if o == nil || o.User == nil {
		var ret int32
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dbv0037QosLimitsMaxJobsPer) GetUserOk() (*int32, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *Dbv0037QosLimitsMaxJobsPer) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given int32 and assigns it to the User field.
func (o *Dbv0037QosLimitsMaxJobsPer) SetUser(v int32) {
	o.User = &v
}

func (o Dbv0037QosLimitsMaxJobsPer) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Account != nil {
		toSerialize["account"] = o.Account
	}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	return json.Marshal(toSerialize)
}

type NullableDbv0037QosLimitsMaxJobsPer struct {
	value *Dbv0037QosLimitsMaxJobsPer
	isSet bool
}

func (v NullableDbv0037QosLimitsMaxJobsPer) Get() *Dbv0037QosLimitsMaxJobsPer {
	return v.value
}

func (v *NullableDbv0037QosLimitsMaxJobsPer) Set(val *Dbv0037QosLimitsMaxJobsPer) {
	v.value = val
	v.isSet = true
}

func (v NullableDbv0037QosLimitsMaxJobsPer) IsSet() bool {
	return v.isSet
}

func (v *NullableDbv0037QosLimitsMaxJobsPer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDbv0037QosLimitsMaxJobsPer(val *Dbv0037QosLimitsMaxJobsPer) *NullableDbv0037QosLimitsMaxJobsPer {
	return &NullableDbv0037QosLimitsMaxJobsPer{value: val, isSet: true}
}

func (v NullableDbv0037QosLimitsMaxJobsPer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDbv0037QosLimitsMaxJobsPer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


